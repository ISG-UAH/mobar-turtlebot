/* Library node for dock action
* Code generated by Diego López Pajares
* 28/10/2015
*/

// Commands for PDDL planner
Boolean	Command insert_predicate(Integer numplanner, String predicate, String objects, Boolean isgoal);
Boolean Command remove_predicate(Integer numplanner, String predicate, String objects);
//TickTime commands
Real    Lookup time;
Real    Lookup tick;
// Commands for ROS. 
String  Command rotate(String ang);
Integer Command autodocking();
String  Command moveBack(Integer dismov);
Boolean Command restartDockServer();
//Boolean Command stopAction(String action);


dock:
{
    In Integer numplanner;
    InOut Boolean stop_dock;
    InOut Boolean dock_finished_ok;
    String rovername    = "turtle";
    String is_charging  = "is_charging";
    String free         = "free";
    Integer movebackundock=40;
    Integer movebackdocktimeout=25;
    Integer autodockmaxtime=60; //60 secons to do autodock;
    Integer DockStatus=1; //0->dock OK // -1 ->Server fails // -2 ->Timeout dock drive
    
    InvariantCondition !stop_dock; // If the timer ends, the dock action must be reevaluated

   AutoDocking:
    Concurrence
    {
        Autodock:
        {
            RepeatCondition DockServerFail.outcome == SUCCESS;
            SkipCondition DockStatus==0 || DockStatus==-2;
            PostCondition DockStatus==0;
            EndCondition Autodock.command_handle==COMMAND_SUCCESS;
            DockStatus=autodocking();
        }
        DockServerFail:
        {
            Boolean dockServerStatus;
            StartCondition DockStatus==-1;
            SkipCondition DockStatus==0;
            EndCondition isKnown(dockServerStatus) || DockStatus==0;
            //Debería añadir un condición de repeticion, pero hay que añadirla bine ue si no da problemas
            PostCondition dockServerStatus ==true;
            dockServerStatus=restartDockServer();
            
        }
        DockDriverFail:
        {
            StartCondition DockStatus==-2;
            RepeatCondition DockStatus==-2;
            SkipCondition DockStatus==0;
            EndCondition DockStatus==0;
            Sequence
            {
                Goback:
                {
                    String p;
                    p=moveBack(movebackdocktimeout);
                }
                ReactivateDockDrive:
                {
                    DockStatus=autodocking();
                }
            }
        }                                
    }
    UpdateDock:
    {
        Boolean ok;
        StartCondition AutoDocking.outcome == SUCCESS;
        SkipCondition AutoDocking.outcome != SUCCESS;
        EndCondition  isKnown(ok);
        ok=insert_predicate(numplanner,is_charging,rovername,false);
    }
    IsntFree:
    {
        Boolean ok;
        StartCondition UpdateDock.outcome == SUCCESS;
        SkipCondition  UpdateDock.outcome != SUCCESS;
        EndCondition  isKnown(ok);
        ok=remove_predicate(numplanner,free,rovername);
    }
    AutodockState:
    {
        StartCondition UpdateDock.state == FINISHED && IsntFree.state == FINISHED;
        PostCondition dock_finished_ok;
        dock_finished_ok= (UpdateDock.outcome == SUCCESS && IsntFree.outcome == SUCCESS);  
    }



/*    StartAutodocking:
    {
        Boolean repeatdrive=false;
        Concurrence
        {
            
            InitDirve:
            {
                RepeatCondition repeatdrive==true;
                SkipCondition DockStatus==0 || DockStatus==-2;
                PostCondition DockStatus==0;
                DockStatus=autodocking();
            }
            DockServerFail:
            {
                StartCondition DockStatus==-1;
                Sequence
                {
                    RestartServer:
                    {
                        Boolean dockServerStatus;
                        PostCondition dockServerStatus ==true;
                        dockServerStatus=restartDockServer();
                    }
                    ReactivateDrive:
                    {
                        //StartCondition RestarServer.outcome==SUCCESS;
                        repeatdrive=true;
                    }
                }
            }
            }}/*DockDriveFails:
            {
                StartCondition DockStatus==-2;
                Sequence
                {
                    GoBack:
                    {
                        // Poner una postcondicion de comando succes para saber si se ha realizado el nodo corrrectamente.
                        String p;
                        p=moveBack(movebackdocktimeout);
                    }
                    ReactivateDrive2:
                    {
                        StartCondition GoBack.outcome==SUCCESS;
                        repeatdrive=true;
                    }
                }
            }    
        }

        UpdateDock:
        {
            Boolean ok;
            StartCondition AutoDocking.outcome == SUCCESS;
            SkipCondition AutoDocking.outcome != SUCCESS;
            EndCondition  isKnown(ok);
            ok=insert_predicate(numplanner,is_charging,rovername,false);
        }
        IsntFree:
        {
            Boolean ok;
            StartCondition UpdateDock.outcome == SUCCESS;
            SkipCondition  UpdateDock.outcome != SUCCESS;
            EndCondition  isKnown(ok);
            ok=remove_predicate(numplanner,free,rovername);
        }
    
    }*/

}
