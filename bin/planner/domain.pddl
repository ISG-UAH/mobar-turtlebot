(define (domain MoBAr-Rover)
   (:requirements :strips :typing :fluents :durative-actions :negative-preconditions);
   (:types loc ang rover cam mode navmode ptupos - object)
   (:predicates
    (position ?r - rover ?p - loc)
    (orientation ?r - rover ?a - ang)
	(obstacle ?p - loc)
    (last_is_rotation)
	(visited ?r - rover ?p - loc)
	(dock ?p - loc)
	(is_charging ?r - rover)
    (has_locomotion ?r - rover)
	(navigation_mode ?r - rover ?n - navmode)
    (camera_mode ?r - rover ?c - cam ?m - mode)
	(ptu_pos ?r - rover ?c - cam ?a - ptupos)
    (picture ?p - loc ?r - rover ?m - mode ?a - ptupos)
    (oriented_picture ?p - loc ?r - rover ?a - ang ?m - mode ?t - ptupos)
   )
   (:constants
	kinect - cam
	p90_90 - ptupos
   )
   (:functions
	(distance_to_move ?p1 ?p2 - loc)
	(square_size)
	(ang_to_rotate ?a1 ?a2 - ang)
	(ang_speed ?r - rover ?n - navmode)
   	(time_to_picture ?c - cam ?m - mode)
	(time_to_charge ?p - loc)
	(autodocking-time ?d - loc)
    (energy ?r - rover)
    (energy_cons ?r - rover)
	(energy_charge ?p - loc)
    (camera_energy ?c - cam ?m - mode)
	(transmit_energy ?r - rover)
    (power_per_dis ?r - rover ?n - navmode)
    (power_per_deg ?r - rover ?n - navmode)
	(speed ?r - rover ?n - navmode)
	(time_move_ptu ?p1 ?p2 - ptupos)
	(ptu_energy)
	(time_point)
   )

    (:durative-action Charge
     :parameters (?r - rover ?d - loc)
	 :duration (= ?duration (time_to_charge ?d))
	 :condition (and (over all (position ?r ?d))
	    	     (over all (dock ?d))
	    	     (over all (is_charging ?r)) )
	 :effect (and (at end (increase (energy ?r) (energy_charge ?d)))
			  (at end (increase (time_point) (time_to_charge ?d))) )
	)

	(:durative-action AutoDock
	 :parameters (?r - rover ?d - loc)
	 :duration (= ?duration (autodocking-time ?d))
	 :condition (and (at start (position ?r ?d))
		         (over all (dock ?d)) )
	 :effect (at end (is_charging ?r))
	)

	(:durative-action UnDock
	 :parameters (?r - rover ?d - loc)
	 :duration (= ?duration (/ (autodocking-time ?d) 2))
	 :condition (and (at start (is_charging ?r))
		         (at start (position ?r ?d))
		         (over all (dock ?d)) )
	 :effect (at end (not (is_charging ?r)))
	)
	 

	(:durative-action ChangeNavMode
	 :parameters (?r - rover ?n1 ?n2 - navmode)
	 :duration (= ?duration 1)
	 :condition (at start (navigation_mode ?r ?n1))
	 :effect (and (at start (not (navigation_mode ?r ?n1)))
		  (at end (navigation_mode ?r ?n2))
			  (at end (increase (time_point) 1)) )
	)
    
 
    (:durative-action Rotate
     :parameters (?r - rover ?a1 ?a2 - ang ?n - navmode)
     :duration (= ?duration (/ (ang_to_rotate ?a1 ?a2) (ang_speed ?r ?n)))
     :condition (and (over all (has_locomotion ?r))
                     (over all (navigation_mode ?r ?n))
                     (over all (not (is_charging ?r)))
                     (at start (orientation ?r ?a1))
                     (at start (>= (energy ?r) (* (power_per_deg ?r ?n)(ang_to_rotate ?a1 ?a2)))) )
     :effect (and (at start (not (orientation ?r ?a1)))
                  (at end (orientation ?r ?a2))
                  (at end (last_is_rotation))
                  (at end (decrease (energy ?r) (* (power_per_deg ?r ?n)(ang_to_rotate ?a1 ?a2)))) 
	              (at end (increase (time_point) (/ (ang_to_rotate ?a1 ?a2)(ang_speed ?r ?n))))
	              (at end (increase (energy_cons ?r) (* (power_per_deg ?r ?n)(ang_to_rotate ?a1 ?a2)))) )
    )

    (:durative-action MoveTo
     :parameters (?r - rover ?p1 ?p2 - loc ?n - navmode)
     :duration (= ?duration (/ (*(distance_to_move ?p1 ?p2)(square_size)) (speed ?r ?n)) )
     :condition (and (over all (has_locomotion ?r))
                     (over all (navigation_mode ?r ?n))
                     (over all (ptu_pos ?r kinect P90_90))
                     (over all (not (is_charging ?r)))
                     (at start (position ?r ?p1))
                     (at start (not (last_is_rotation)))
		     (at start (not (obstacle ?p2)))
                     (at start (>= (energy ?r) (* (power_per_dis ?r ?n) (*(distance_to_move ?p1 ?p2)(square_size)) ))) )
     :effect (and (at start (not (position ?r ?p1)))
 	              (at start (not (last_is_rotation)))
                  (at end (position ?r ?p2))
	              (at end (visited ?r ?p2))
                  (at end (decrease (energy ?r) (* (power_per_dis ?r ?n)(*(distance_to_move ?p1 ?p2)(square_size))))) 
	              (at end (increase (time_point) (/ (*(distance_to_move ?p1 ?p2)(square_size)) (speed ?r ?n))))
	              (at end (increase (energy_cons ?r) (* (power_per_dis ?r ?n)(*(distance_to_move ?p1 ?p2)(square_size))))) )
    )

	(:durative-action MovePTU
	 :parameters (?r - rover ?c - cam ?p1 ?p2 - ptupos)
	 :duration (= ?duration (time_move_ptu ?p1 ?p2))
	 :condition (and (at start (ptu_pos ?r ?c ?p1))
                         (at start (>= (energy ?r) (* (ptu_energy)(time_move_ptu ?p1 ?p2)))) )
	 :effect (and (at start (not (ptu_pos ?r ?c ?p1)))
                      (at end (ptu_pos ?r ?c ?p2))
                      (at end (decrease (energy ?r) (* (ptu_energy)(time_move_ptu ?p1 ?p2)))) 
		              (at end (increase (time_point) (time_move_ptu ?p1 ?p2)))
		              (at end (increase (energy_cons ?r) (* (ptu_energy)(time_move_ptu ?p1 ?p2)))) )
	)

    (:durative-action TakePicture
     :parameters (?r - rover ?p - loc ?c - cam ?a - ptupos ?m - mode)
     :duration (= ?duration (time_to_picture ?c ?m))
     :condition (and (over all (camera_mode ?r ?c ?m))
                     (over all (position ?r ?p))
                     (over all (ptu_pos ?r ?c ?a))
                     (at start (>= (energy ?r) (camera_energy ?c ?m))) )
     :effect (and (at end (picture ?p ?r ?m ?a))
                  (at end (decrease (energy ?r) (camera_energy ?c ?m)))
	              (at end (increase (time_point) (time_to_picture ?c ?m)))
	              (at end (increase (energy_cons ?r) (camera_energy ?c ?m))) )
    )
    
    (:durative-action TakePictureWithOrientation
     :parameters (?r - rover ?p - loc ?o - ang ?c - cam ?a - ptupos ?m - mode)
     :duration (= ?duration (time_to_picture ?c ?m))
     :condition (and (over all (camera_mode ?r ?c ?m))
                     (over all (position ?r ?p))
                     (over all (orientation ?r ?o))
                     (over all (ptu_pos ?r ?c ?a))
                     (at start (last_is_rotation))
                     (at start (>= (energy ?r) (camera_energy ?c ?m))) )
     :effect (and (at end (oriented_picture ?p ?r ?o ?m ?a))
                  (at end (not (last_is_rotation)))
                  (at end (decrease (energy ?r) (camera_energy ?c ?m)))
	              (at end (increase (time_point) (time_to_picture ?c ?m)))
	              (at end (increase (energy_cons ?r) (camera_energy ?c ?m))) )
    )

)
