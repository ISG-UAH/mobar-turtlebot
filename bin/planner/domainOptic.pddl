(define (domain MoBAr-Rover)
   (:requirements :strips :typing :fluents :durative-actions :negative-preconditions);
   (:types loc rover cam mode navmode ptupos - object)
   (:predicates
    (position ?r - rover ?p - loc)
	(visited ?r - rover ?p - loc)
	(dock ?p - loc)
    (camera_mode ?r - rover ?c - cam ?m - mode)
	(ptu_pos ?r - rover ?c - cam ?a - ptupos)
    (picture ?p - loc ?r - rover ?m - mode ?a - ptupos)
	(is_charging ?r - rover)
	(free ?r - rover)
    (extra_energy ?r - rover)
   )
   (:constants
	kinect - cam
	p90_90 - ptupos
   )
   (:functions
	(distance_to_move ?p1 ?p2 - loc)
	(square_size)
   	(time_to_picture ?c - cam ?m - mode)
    (time_to_charge ?p - loc)
    (energy_cons ?r - rover)
    (energy ?r - rover)
	(energy_charge ?p - loc)
    (camera_energy ?c - cam ?m - mode)
	(extra_energy ?r - rover)
    (power_per_dis ?r - rover)
	(speed ?r - rover)
	(time_move_ptu ?p1 ?p2 - ptupos)
	(ptu_energy)
	(autodocking-time ?d - loc)
    (distance_undock ?r  - rover)
    (undocking_duration ?r - rover)
    (turn_time ?r - rover)
   )

    (:durative-action Charge
     :parameters (?r - rover ?d - loc)
	 :duration (= ?duration (time_to_charge ?d))
	 :condition (and (over all (position ?r ?d))
	    	     (over all (dock ?d))
	    	     (over all (is_charging ?r)) )
	 :effect (and (at end (increase (energy ?r) (energy_charge ?d))) )
	)
    
	(:durative-action AutoDock
	 :parameters (?r - rover ?d - loc)
	 :duration (= ?duration (autodocking-time ?d))
	 :condition (and (at start (position ?r ?d))
                                                        (at start (free ?r))
		         (over all (dock ?d)) )
	 :effect (and (at end (is_charging ?r))
		      (at end (not (free ?r))))
	)

	(:durative-action UnDock
	 :parameters (?r - rover ?d - loc)
	 :duration (= ?duration (undocking_duration ?r))
	 :condition (and (at start (is_charging ?r))
		         (at start (position ?r ?d))
		         (over all (dock ?d)) )
	 :effect (and (at end (not (is_charging ?r)))
		      (at end (free ?r)) 
              (at end (increase (energy_cons ?r) (*(square_size) (power_per_dis ?r)))) )
	)

    (:durative-action MoveTo
     :parameters (?r - rover ?p1 ?p2 - loc)
     :duration (= ?duration (+ (turn_time ?r) (/ (distance_to_move ?p1 ?p2)(speed ?r))) )
     :condition (and (over all (ptu_pos ?r kinect P90_90))
                     (at start (position ?r ?p1))
		                (over all (free ?r)) 
                     (over all (>= (energy ?r) (energy_cons ?r))))
     :effect (and (at start (not (position ?r ?p1)))
                  (at end (position ?r ?p2))
	          (at end (visited ?r ?p2)) 
		  (at end (increase (energy_cons ?r) (+ (* (distance_to_move ?p1 ?p2)(power_per_dis ?r)) (extra_energy ?r)  ) )) )
    )

    (:durative-action MovePTU
     :parameters (?r - rover ?c - cam ?p1 ?p2 - ptupos)
     :duration (= ?duration (time_move_ptu ?p1 ?p2))
     :condition (and (at start (ptu_pos ?r ?c ?p1))
                                                                    (over all (free ?r)) 
                (over all (>= (energy ?r) (energy_cons ?r))) )
     :effect (and (at start (not (ptu_pos ?r ?c ?p1)))
	          (at end (ptu_pos ?r ?c ?p2))
		  (at end (increase (energy_cons ?r) (* (ptu_energy)(time_move_ptu ?p1 ?p2)))) )
    )

    (:durative-action TakePicture
     :parameters (?r - rover ?p - loc ?c - cam ?a - ptupos ?m - mode)
     :duration (= ?duration (time_to_picture ?c ?m))
     :condition (and (over all (camera_mode ?r ?c ?m))
                     (over all (position ?r ?p))
                                                                    (over all (free ?r)) 
                     (over all (ptu_pos ?r ?c ?a))
                        (over all (>= (energy ?r) (energy_cons ?r))) )
     :effect (and (at end (picture ?p ?r ?m ?a))
	     (at end (increase (energy_cons ?r) (camera_energy ?c ?m))) )
    )
)
